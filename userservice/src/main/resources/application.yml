spring:
  application:
    name: 'userservice'
  main:
    banner-mode: 'off'
  datasource:
    driver-class-name: org.postgresql.Driver
    url: 'jdbc:postgresql://postgres:5432/postgres'
    username: postgres
    password: postgres
    hikari:
      schema: '${spring.application.name}'
  jpa:
    properties:
      hibernate:
        default_schema: '${spring.application.name}'
  jackson:
    default-property-inclusion: non_empty

  liquibase:
    enabled: true
    change-log: changelog.sql
    driver-class-name: org.postgresql.Driver
    user: postgres
    password: postgres
    url: 'jdbc:postgresql://postgres:5432/postgres'
    default-schema: '${spring.application.name}'
    liquibase-schema: '${spring.application.name}'
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      transaction-id-prefix: '${spring.application.name}'
    consumer:
      properties:
        spring.json.trusted.packages: "*"
        fetch.max.wait.ms: 50
        fetch.min.bytes: 1048576
        processing.guarantee: exactly_once
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.UUIDDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.type.mapping: >
          entity.balanceservice.balance_update:com.slow3586.micromarket.api.balance.BalanceUpdateDto,
          entity.balanceservice.balance_update_order:com.slow3586.micromarket.api.balance.BalanceUpdateOrderDto,
          entity.deliveryservice.delivery:com.slow3586.micromarket.api.delivery.DeliveryDto,
          entity.orderservice.order:com.slow3586.micromarket.api.order.OrderDto,
          entity.productservice.product:com.slow3586.micromarket.api.product.ProductDto,
          entity.stockservice.stock_update:com.slow3586.micromarket.api.stock.StockUpdateDto,
          entity.stockservice.stock_update_order:com.slow3586.micromarket.api.stock.StockUpdateOrderDto,
          entity.userservice.user:com.slow3586.micromarket.api.user.UserDto
      group-id: '${spring.application.name}'
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      fetch-min-size: 1MB
      fetch-max-wait: 50ms
    streams:
      application-id: '${spring.application.name}-streams'
      replication-factor: 1
      properties:
        default.key.serde: org.apache.kafka.common.serialization.Serdes$UUIDSerde
        default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
        spring.json.trusted.packages: "*"
        fetch.max.wait.ms: 50
        fetch.min.bytes: 1048576
        processing.guarantee: exactly_once
  cloud:
    openfeign:
      client:
        config:
          default:
            default-request-headers:
              Authorization: Bearer ${API_KEY}
  cache:
    type: redis
  data:
    redis:
      host: redis
      password: redis
      client-name: ${spring.application.name}

SECRET_KEY: qweqweqweqweqweqweqweqweqweqweqrqwrqwrtweqtewqtweq
API_KEY: qwtiuqwtiuqiwutiqwitiqwutiqwuituqwiotuqiowutiq
app:
  client.balance: http://balanceservice:8080
  client.delivery: http://deliveryservice:8080
  client.notification: http://notificationservice:8080
  client.order: http://orderservice:8080
  client.product: http://productservice:8080
  client.stock: http://stockservice:8080
  client.user: http://userservice:8080

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    sampling.probability: 1
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  otlp:
    tracing:
      endpoint: http://localhost:4317
