{
	"info": {
		"_postman_id": "510bbdb3-91f0-4570-90bb-fcf85dea3c96",
		"name": "MicroMarket",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20842312"
	},
	"item": [
		{
			"name": "Register product seller user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"sellerUserId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{sellerUserLogin}}\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in as product seller user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"sellerBearerToken\", pm.response.text());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{sellerUserLogin}}\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new product as seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"productId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sellerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"name\",\r\n  \"price\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/product/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"product",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update new product stock as seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sellerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"productId\": \"{{productId}}\",\r\n  \"value\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/stock/update",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"stock",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register buyer user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"buyerUserId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"{{buyerUserLogin}}\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log in as buyer user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"buyerBearerToken\", pm.response.text());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"login\": \"buyer\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get product info as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"name\",\r\n  \"price\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/product/{{productId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"product",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"orderId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"{{productId}}\",\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/order/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"order",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replenish balance for buyer as API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{apiKey}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{buyerUserId}}\",\r\n  \"value\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/balance/replenish/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"balance",
						"replenish",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check balance as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/balance",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check delivery status as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"deliveryId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/delivery/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"delivery",
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update delivery as sent as API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{apiKey}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userId}}\",\r\n  \"value\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/delivery/update/sent/{{deliveryId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"delivery",
						"update",
						"sent",
						"{{deliveryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update delivery as received as API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{apiKey}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userId}}\",\r\n  \"value\": 100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/delivery/update/received/{{deliveryId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"delivery",
						"update",
						"received",
						"{{deliveryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check order status as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/order/{{orderId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"order",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all balance changes as buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{buyerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/balance/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"balance",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all balance changes as seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Not blank\", function () {\r",
							"    pm.expect(pm.response.text()).to.have.length.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"No exceptions\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Exception\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{sellerBearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/balance/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"balance",
						"list"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "apiKey",
			"value": "qwtiuqwtiuqiwutiqwitiqwutiqwuituqwiotuqiowutiq",
			"type": "string"
		},
		{
			"key": "sellerUserLogin",
			"value": "seller",
			"type": "string"
		},
		{
			"key": "sellerUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "sellerBearerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyerUserLogin",
			"value": "buyer",
			"type": "string"
		},
		{
			"key": "buyerUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "buyerBearerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "deliveryId",
			"value": ""
		}
	]
}