spring:
  application:
    name: 'stockservice'
  main:
    banner-mode: 'off'
  datasource:
    driver-class-name: org.postgresql.Driver
    url: 'jdbc:postgresql://postgres:5432/postgres'
    username: postgres
    password: postgres
    hikari:
      schema: '${spring.application.name}'
  jpa:
    properties:
      hibernate:
        default_schema: '${spring.application.name}'
  jackson:
    default-property-inclusion: non_empty
  liquibase:
    enabled: true
    change-log: changelog.sql
    driver-class-name: org.postgresql.Driver
    user: postgres
    password: postgres
    url: 'jdbc:postgresql://postgres:5432/postgres'
    default-schema: '${spring.application.name}'
    liquibase-schema: '${spring.application.name}'
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      transaction-id-prefix: '${spring.application.name}'
    consumer:
      properties:
        spring.json.trusted.packages: "*"
        fetch.max.wait.ms: 50
        fetch.min.bytes: 1048576
        processing.guarantee: exactly_once
      group-id: '${spring.application.name}'
      key-deserializer: org.apache.kafka.common.serialization.UUIDDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      fetch-min-size: 1MB
      fetch-max-wait: 50ms
    streams:
      application-id: '${spring.application.name}-streams'
      replication-factor: 1
      properties:
        default.key.serde: org.apache.kafka.common.serialization.Serdes$UUIDSerde
        default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
        spring.json.trusted.packages: "*"
        fetch.max.wait.ms: 50
        fetch.min.bytes: 1048576
        processing.guarantee: exactly_once
  cloud:
    openfeign:
      client:
        config:
          default:
            logger-level: full
            default-request-headers:
              Authorization: Bearer ${API_KEY}
  cache:
    type: redis
  data:
    redis:
      host: redis
      password: redis
      client-name: ${spring.application.name}
management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  endpoint:
    health:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    sampling.probability: 0.05
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
logging.level.com.slow3586.micromarket.api: debug